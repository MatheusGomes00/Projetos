Programação orientada a objetos é um paradigma. Um paradigma 
de programação é um estilo de programação, não é a linguagem,
e sim a forma como você soluciona os problemas através do 
código.

Exemplos de paradigmas de programação:
    Imperativo ou procedural;
    Funcional;
    Orientado a eventos.

O paradigma de programação orientada a objetos estrutura o 
código abstraindo problemas em objetos do mundo real, 
facilitando o entendimento do código e tornando-o mais modular,
maleável, manipulável e extensível. Os dois conceitos chaves 
para aprender POO são: CLASSES E OBJETOS.

Uma classe define as características e comportamentos de um 
objeto, porém não conseguimos usá-las diretamente. Já os 
objetos podemos usa-los e eles possuem as características e 
comportamentos que foram definidos nas classes.

O método construtor sempre é executado quando uma nova 
instância da classe é criada (quando declaramos uma variável
que recebe alguma instância da classe). Neste método 
inicializamos o estado do nosso objeto. Para declarar o método
construtor da classe, criamos um método com o nome '__init__'.
Ex. init:
class Cachorro:
    def __init__(self, nome, cor, acordado=True)
        self.nome = nome
        self.cor = cor
        self.acordado = acordado

O método destrutor sempre é executado quando uma instância
(objeto) é destruída. Destrutores em Python não são tão
necessários quanto em C++ porque o Python tem um coletor de 
lixo (garbage_collector vide https://larissacroco.medium.com/o-que-%C3%A9-e-como-funciona-o-garbage-collector-em-python-87dbf6453d64)
see also https://realpython.com/python-memory-management/
que lida com o gerenciamento de memória automaticamente. Para
declarar o método destrutor da classe, criamos um método com o
nome '__del__'.
Ex. del:
class Cachorro:
    def __del__(self):
        print("Destruindo a instância")


c = Cachorro()
del c


Herança é a capacidade de uma classe filha derivar ou herdar
as características e comportamentos da classe pai (base).
Benefícios:
    -Representa bem os relacionamentos do mundo real.
    -Fornece reutilização de código, não precisamos escrever o
    mesmo código repetidamente. Além disso, permite adicinar
    mais recursos a uma classe sem modifica-la.
    -É de natureza transitiva, o que siginifica que, se a 
    classe B herdar da classe A, todas as subclasses de B 
    herdarão automaticamente da classe A.
Ex.:
class A:
    pass

class B(A):
    pass


Herança simples é quando uma classe herda apenas uma classe;
Herança multipla é quando uma classe herda de várias classes.


O encapsulamento é um dos conceitos fundamentais em programação
orientada a objetos. Ele descreve a ideia de agrupar dados e os
métodos que manipulam esses dados em uma unidade. Isso impõe 
restrições ao acesso direto a variáveis e métodos e pode evitar
a modificação acidental de dados. Para evitar alterações 
acidentais, a variável de um objeto só pode ser alterada pelo
método desse objeto.
Em linguagens como Java e C++, existem palavras reservadas para
definir o nível de acesso aos atributos e métodos da classe.
Em python não temos palavras reservadas, porém usamos 
convenções no nome do recurso, para definir se a variável é
pública ou privada.
Público: Pode ser acessado de fora da classe.
Privado: Só pode ser acessado pela classe.
Todos os recursos são públicos, a menos que o nome inicie com
underline. Ou seja, o interpretador Python não irá garantir a 
proteção do recurso, mas por ser uma convenção amplamente 
adotada na comunidade, quando encontramos uma variável e/ou 
método com nome iniciado por underline, sabemos que não
deveríamos manipular o seu valor diretamente, ou invocar o 
método fora do escopo da classe.
Ex.:
class Conta:
    def __init__(self, saldo=0):
        self._saldo = saldo

    def depositar(self, valor):
        pass

    def sacar(self, valor):
        pass





